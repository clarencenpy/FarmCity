package utility;

import java.util.*;

/**
 * Provides some utilities for animating text on the console
 */
public class Animator {

	private static boolean animate = Env.properties.getProperty("animation").equals("true");

	/**
	 * Animates a sequence of frames on the console
	 * @param frames frames to be animated
	 * @param loop how many times to repeat
	 * @param speed delay between each frame
	 */
	public static void start(ArrayList<String> frames, int loop, int speed) {
		try {
			for (int i=0; i<loop; i++) {
				for (String frame : frames) {
					Screen.clear();
					Screen.green(frame);
					Thread.sleep(speed);
				}
			}	
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Displays a message with a spinning loader
	 * @param s the message to display
	 */
	public static void loadingMessage(String s) {
		if (!animate) {
			System.out.println(s);
		}
		System.out.print(s + " |");
		try {
			for (int i=0; i<2; i++) {
				System.out.print("\b/");
				System.out.flush();
				Thread.sleep(200);
				System.out.print("\b-");
				System.out.flush();
				Thread.sleep(200);
				System.out.print("\b\\");
				System.out.flush();
				Thread.sleep(200);
				System.out.print("\b|");
				System.out.flush();
				Thread.sleep(200);
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.print("\r");
	}

	/**
	 * Display the farm city opening sequence
	 */
	public static void opening() {
		if (!animate) {
			return;
		}
		ArrayList<String> frames = new ArrayList<>();
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n"
		);
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n" +
			"|_   __  |    / \\      |_   __ \\    |_   \\  /   _|    .' ___  | |_   _| |  _   _  | |_  _||_  _|\n"
		);
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n" +
			"|_   __  |    / \\      |_   __ \\    |_   \\  /   _|    .' ___  | |_   _| |  _   _  | |_  _||_  _|\n" +
			"  | |_ \\_|   / _ \\       | |__) |     |   \\/   |     / .'   \\_|   | |   |_/ | | \\_|   \\ \\  / /  \n"
		);
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n" +
			"|_   __  |    / \\      |_   __ \\    |_   \\  /   _|    .' ___  | |_   _| |  _   _  | |_  _||_  _|\n" +
			"  | |_ \\_|   / _ \\       | |__) |     |   \\/   |     / .'   \\_|   | |   |_/ | | \\_|   \\ \\  / /  \n" +
			"  |  _|     / ___ \\      |  __ /      | |\\  /| |     | |          | |       | |        \\ \\/ /   \n"
		);
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n" +
			"|_   __  |    / \\      |_   __ \\    |_   \\  /   _|    .' ___  | |_   _| |  _   _  | |_  _||_  _|\n" +
			"  | |_ \\_|   / _ \\       | |__) |     |   \\/   |     / .'   \\_|   | |   |_/ | | \\_|   \\ \\  / /  \n" +
			"  |  _|     / ___ \\      |  __ /      | |\\  /| |     | |          | |       | |        \\ \\/ /   \n" +
			" _| |_    _/ /   \\ \\_   _| |  \\ \\_   _| |_\\/_| |_    \\ `.___.'\\  _| |_     _| |_       _|  |_   \n"
		);
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n" +
			"|_   __  |    / \\      |_   __ \\    |_   \\  /   _|    .' ___  | |_   _| |  _   _  | |_  _||_  _|\n" +
			"  | |_ \\_|   / _ \\       | |__) |     |   \\/   |     / .'   \\_|   | |   |_/ | | \\_|   \\ \\  / /  \n" +
			"  |  _|     / ___ \\      |  __ /      | |\\  /| |     | |          | |       | |        \\ \\/ /   \n" +
			" _| |_    _/ /   \\ \\_   _| |  \\ \\_   _| |_\\/_| |_    \\ `.___.'\\  _| |_     _| |_       _|  |_   \n" +
			"|_____|  |____| |____| |____| |___| |_____||_____|    `.____ .' |_____|   |_____|     |______|  \n"
		);
		frames.add(
			" /\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\____/\\|/\\\n" +
			" ________      _        _______      ____    ____       ______   _____   _________   ____  ____ \n" +
			"|_   __  |    / \\      |_   __ \\    |_   \\  /   _|    .' ___  | |_   _| |  _   _  | |_  _||_  _|\n" +
			"  | |_ \\_|   / _ \\       | |__) |     |   \\/   |     / .'   \\_|   | |   |_/ | | \\_|   \\ \\  / /  \n" +
			"  |  _|     / ___ \\      |  __ /      | |\\  /| |     | |          | |       | |        \\ \\/ /   \n" +
			" _| |_    _/ /   \\ \\_   _| |  \\ \\_   _| |_\\/_| |_    \\ `.___.'\\  _| |_     _| |_       _|  |_   \n" +
			"|_____|  |____| |____| |____| |___| |_____||_____|    `.____ .' |_____|   |_____|     |______|  \n" +
			"\n\n"
		);

		start(frames, 1, 200);
		
	}
}